// Last updated: 10/16/2025, 11:56:51 AM
class Solution {
    public boolean isBipartite(int[][] graph) {
        Queue<BipartitePair> q = new LinkedList<>();
        HashMap<Integer, Integer> visited = new HashMap<>();

        for (int i = 0; i < graph.length; i++) { // vtx -- 0,1,2,... index tk chlega
            if (visited.containsKey(i)) {
                continue; // agar already visited hai toh skip
            }
            q.add(new BipartitePair(i, 0)); // starting vertex ko level 0 se daala

            while (!q.isEmpty()) {
                // 1. Remove
                BipartitePair rp = q.poll();

                // 2. Ignore if already visited
                if (visited.containsKey(rp.vtx)) {
                    if (visited.get(rp.vtx) != rp.dis) {
                        return false; // agar same vertex pe different level mila toh bipartite nahi hai
                    }
                    continue;
                }

                // 3. Mark visited
                visited.put(rp.vtx, rp.dis);

                // 4. Add unvisited neighbors
                for (int nbrs : graph[rp.vtx]) {
                    if (!visited.containsKey(nbrs)) {
                        q.add(new BipartitePair(nbrs, rp.dis + 1));
                    }
                }
            }
        }

        return true; // agar sab kuch sahi chala toh graph bipartite hai
    }

    static class BipartitePair {
        int vtx;
        int dis;
        public BipartitePair(int vtx, int dis) {
            this.vtx = vtx;
            this.dis = dis;
        }
    }
}